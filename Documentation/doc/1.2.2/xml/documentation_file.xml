<Project>
  <Information>
    <Menu>
      <ul>
<li><a href="index.html">Welcome to Doctran</a></li>
<li><a href="what-s-new.html">What's New</a></li>
<li>Getting Started
<ul>
<li><a href="getting-started/system-requirements-and-installation.html">System Requirements and Installation</a></li>
<li><a href="getting-started/your-first-documentation.html">Your First Documentation</a></li>
<li><a href="getting-started/generating-a-static-wiki.html">Generating a Static Wiki</a></li>
</ul></li>
<li><a href="command-line-options.html">Command Line Options</a></li>
<li>Source Comments
<ul>
<li><a href="source-comments/description-meta-data.html">Description Meta-Data</a></li>
<li><a href="source-comments/information-meta-data.html">Information Meta-Data</a>
<ul>
<li><a href="source-comments/information-meta-data/author.html">Author</a></li>
</ul></li>
</ul></li>
<li><a href="project-files.html">Project Files</a>
<ul>
<li>Types
<ul>
<li><a href="project-files/types/author.html">Author</a></li>
<li><a href="project-files/types/copy.html">Copy</a></li>
<li><a href="project-files/types/copyandparse.html">CopyAndParse</a></li>
<li><a href="project-files/types/menu.html">Menu</a></li>
<li><a href="project-files/types/name.html">Name</a></li>
<li><a href="project-files/types/searchable.html">Searchable</a></li>
<li><a href="project-files/types/showsource.html">ShowSource</a></li>
<li><a href="project-files/types/source.html">Source</a></li>
<li><a href="project-files/types/tagline.html">Tagline</a></li>
<li><a href="project-files/types/userpage.html">UserPage</a></li>
</ul></li>
<li>Values
<ul>
<li><a href="project-files/values/path.html">PATH</a></li>
</ul></li>
</ul></li>
<li><a href="menu-files.html">Menu Files</a></li>
<li><a href="user-page-files.html">User Page Files</a></li>
<li><a href="../version-catalogue/index.html">Version Catalogue</a></li>
<li><a href="http://www.doctran.co.uk">Doctran Home</a></li>
</ul>
</Menu>
    <UserPage>
      <Prefix />
      <href>command-line-options.html</href>
      <Path>.\command-line-options.html</Path>
      <Content>
        <h1>Command Line Options</h1>

<p>Doctran can be supplied with the command-line options shown below.</p>

<h2>Help</h2>

<p>These options force Doctran to display various information meant to be helpful to the user.</p>

<table>
<thead>
<tr><td>Option name</td><td>Description</td></tr>
</thead>
<tbody>
<tr><td>--help</td><td>Displays usage information.</td></tr>

<tr><td>--license</td><td>Run Doctran with this options to enter a license key and view license information.</td></tr>

<tr><td>--plugins</td><td>This option forces Doctran to check the plugins path for any plugins present and write their names and version. Doctran will exit immediately after plugins have been checked.</td></tr>

<tr><td>--verbose VALUE</td><td>
Sets how much information should written to the screen. VALUE can be the following:
 <ul>
     <li> 1 - No output apart from fatal errors.</li>
     <li> 2 - (Default) Basic information output. Statement of the current operation, warning messages and fatal errors are written to the screen.</li>
     <li> 3 - Detailed information output. Everything from 2 with a lot of information on what is processing.</li>
 </ul>
</td></tr>

</tbody>
</table>

<h2>I/O</h2>

<p>These options allow the user to affect the input and output.</p>

<table>
<thead>
<tr><td>Option name</td><td>Description</td></tr>
</thead>
<tbody>

<tr><td> --output, -o DIR</td><td>DIR is the output directory for the documentation. (Default: Docs).</td></tr>

<tr><td>--overwrite</td><td>If this option is specified, then the auxiliary files (css, scripts, etc.) and html files in the output directory will be overwritten. If not, then just the html files will be overwritten, which is the default behaviour.</td></tr>

<tr><td> --save_xml FILE</td><td>Specifies a path to save the intermediary XML document generated. The document is not saved by default.</td></tr>

</tbody>
</table>

<h2>Project</h2>

<p>These options allow the user to specify information relating to their project.</p>

<table>
<thead>
<tr>
<td>Option name</td><td>Description</td>
</tr>
</thead>
<tbody>
<tr>
<td>--project_info FILE,</td><td>FILE is the name and/or path of the project's information file.</td>
</tr>
</tbody>
</table>   
</Content>
    </UserPage>
    <UserPage>
      <Prefix />
      <href>index.html</href>
      <Path>.\index.html</Path>
      <Content>
        <h1>Welcome to Doctran 1.2.3 - 1.2.2</h1>

<p><image align="left" style="margin: 0 4em 1.0em 0" src="images/logo.png" /> Doctran is a documentation generator for generating API documentation in HTML format from modern Fortran source code. It has full support for Fortran 95 standard and the object oriented parts of the Fortran 2003 standard.</p>

<p>The HTML format allows related documents to be conveniently hyper-linked together. Both breadcrumb and drop-down menu navigations are automatically generated to allow quick access to all parts of you source code.</p>

<p>Doctran is a cross platform application and can be run on Windows, Linux and Mac systems.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix />
      <href>menu-files.html</href>
      <Path>.\menu-files.html</Path>
      <Content>
        <h1>Menu Files</h1>

<p>A menu file is just a HTML (.html) or markdown (.md or .markdown) file containing a list of links you want to appear in the documentation menu. Items can either be simple links or special macros that will insert lists of links generated from your Fortran source code. Files should should only contain the list in your chosen markup and not any boilerplate tags such as <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>

<h2>Macros</h2>

<p>Macros can be used within your menu files to automatically generate menu links to your source code pages. The following macros are supported:</p>

<ul>
<li><code>|Name|</code> - The name of the current block.</li>
<li><code>|BlockName|</code> - The type name of the current block.</li>
<li><code>|List, TYPE_VALUE|</code> - Lists all items of <code>TYPE</code>.</li>
<li><code>|List, TYPE_VALUE, Recursive|</code> - Lists all items of <code>TYPE</code>, as well as their sub-blocks.</li>
</ul>

<p>where <code>TYPE_VALUE</code> can be any of the following:</p>

<ul>
<li><code>Project</code> - The current project.</li>
<li><code>File</code> - Fortran source files.</li>
<li><code>Module</code> - Fortran modules.</li>
<li><code>DerivedType</code> - Fortran user-defined derived-types.</li>
<li><code>Function</code> - External and module functions.</li>
<li><code>Subroutine</code> - External and module subroutines.</li>
<li><code>Assignment</code> - Generic assignment interfaces.</li>
<li><code>Overload</code> - Generic name interfaces.</li>
<li><code>Operator</code> - Generic operator interfaces.</li>
<li><code>Variable</code> - Module variables.</li>
</ul>

<p>The previous <code>TYPE_VALUE</code> values adds menu items that do not change from page to page. The next <code>TYPE_VALUE</code> values add menu item that are dependant on the user's current page.</p>

<ul>
<li><code>SubBlocks</code> -  Current block's sub-blocks.</li>
<li><code>SubBlocksAndSelf</code> - Current block as well as it's sub-blocks.</li>
<li><code>SameType</code> -Blocks of the same type as the current block.</li>
</ul>

<h2>Example</h2>

<p>An example markdown menu file is shown below.</p>

<pre><code>    * [Welcome](index.md)
    * [File List](filelist.md) |List, File|
    * [Module API](modulelist.md) |List,Module,Recursive|
</code></pre>

<p>The above menu file will produce</p>

<ul>
<li>A link to an index <a href="project-files/types/userpage.md">user page</a>.</li>
<li>A "File List" heading linked to a <a href="project-files/types/userpage.md">user page</a>, followed by a generated list of links to source file documentation. </li>
<li>A "Module API" heading linked to a <a href="project-files/types/userpage.md">user page</a>, followed by a generated list of links to module documentation. </li>
</ul>
</Content>
    </UserPage>
    <UserPage>
      <Prefix />
      <href>project-files.html</href>
      <Path>.\project-files.html</Path>
      <Content>
        <h1>Project Files</h1>

<p>The project file is simply a plain text file that contains information about your project. You can specify a project file using the <code>--project_info</code> option.</p>

<p>A project file contains informational elements which have the form <code>TYPE: VALUE</code>. The following values for <code>TYPE</code> are supported:</p>

<ul>
<li><a href="project-files/types/author.md">Author</a></li>
<li><a href="project-files/types/copy.md">Copy</a></li>
<li><a href="project-files/types/copyandparse.md">CopyAndParse</a></li>
<li><a href="project-files/types/menu.md">Menu</a></li>
<li><a href="project-files/types/name.md">Name</a></li>
<li><a href="project-files/types/searchable.md">Searchable</a></li>
<li><a href="project-files/types/showsource.md">ShowSource</a></li>
<li><a href="project-files/types/source.md">Source</a></li>
<li><a href="project-files/types/name.md">Tagline</a></li>
<li><a href="project-files/types/userpage.md">UserPage</a></li>
</ul>

<p>The following possible values of <code>VALUE</code> are supported:</p>

<ul>
<li><a href="project-files/values/path.md">PATH</a></li>
</ul>

<h2>Example</h2>

<p>An example project file is shown below</p>

<pre><code>Name: Timers
Tagline: Making timing easy.

Menu: menu.md
Markup: markdown

UserPage: index.md
UserPage: filelist.md
UserPage: modulelist.md

Source: ../src/*.f90

ShowSource:
&gt; Type: File
&gt; Type: Program

Searchable:
&gt; Type: Program
&gt; Type: DerivedType
&gt; Type: Assignment
&gt; Type: Overload
&gt; Type: Operator
&gt; Type: Function
&gt; Type: Subroutine
</code></pre>
</Content>
    </UserPage>
    <UserPage>
      <Prefix />
      <href>user-page-files.html</href>
      <Path>.\user-page-files.html</Path>
      <Content>
        <h1>User Page Files</h1>

<p>A user page file can be either be a html (.html) or markdown (.md or .markdown) file. This file should contain the content you want to be displayed in your chosen markup. To include a user page file within your project use the <a href="project-files/types/userpage.md">UserPage</a> element in your <a href="project-files.md">project file</a>.</p>

<p>The first heading is used as the title for the user page and all relative links such as links, images, CSS and script are assumed to be relative to the project file. Files should not contain any boilerplate tags such as <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code> only your content.</p>

<p>To allow more flexibility, menu entries are not automatically generated. Instead, menu entries are added manually to the <a href="menu-files.md">menu file</a>.</p>

<h2>Macros</h2>

<p>Macros can be used within your user page files to include information about your source code. The following macros are supported:</p>

<ul>
<li><code>|Table, TYPE_VALUE|</code> - When placed within <code>&lt;table&gt;</code> tags, the table will be populated with item of <code>TYPE_VALUE</code>.</li>
</ul>

<p>where <code>TYPE_VALUE</code> can be any of the following:</p>

<ul>
<li><code>Project</code> - The current project.</li>
<li><code>File</code> - Fortran source files.</li>
<li><code>Module</code> - Fortran modules.</li>
<li><code>DerivedType</code> - Fortran user-defined derived-types.</li>
<li><code>Function</code> - External and module functions.</li>
<li><code>Subroutine</code> - External and module subroutines.</li>
<li><code>Assignment</code> - Generic assignment interfaces.</li>
<li><code>Overload</code> - Generic name interfaces.</li>
<li><code>Operator</code> - Generic operator interfaces.</li>
<li><code>Variable</code> - Module variables.</li>
</ul>

<h2>Example</h2>

<p>An example user page file is shown below. It uses markup syntax and a macro to show a list of files linking to their documentation pages.</p>

<pre><code>#Welcome

## Description 
This project contains types and procedures.

## File List
This project contains the following Fortran 95 source files.

&lt;table&gt;
|table,file|
&lt;/table&gt;
</code></pre>
</Content>
    </UserPage>
    <UserPage>
      <Prefix />
      <href>what-s-new.html</href>
      <Path>.\what-s-new.html</Path>
      <Content>
        <h1>What's New</h1>

<h3>What's new in Doctran 1.2.3</h3>

<ul>
<li>Improved error messages.</li>
<li>Fixed bug causing block description heading sections to not be collapsible.</li>
<li>Fixed broken links in procedure argument documentation.</li>
</ul>

<h3>What's new in Doctran 1.2.2</h3>

<ul>
<li>The style of the generated documentation has been modified to take advantage of wide screen and high resolution displays.</li>
<li><code>Menu</code> project information element added, to allow menu customizations. The menu is now generated from a markdown or HTML file containing macros.</li>
<li><code>UserPage</code> project information element added, so that additional documentation pages can be created from the user's markdown or HTML files.</li>
<li><code>Source</code> project information element added so that source files can be specified from the project file. </li>
<li><code>Tagline</code> project information element added, which should not be used to specify the project's tagline.</li>
<li>A project page is no longer automatically generated from comments within the project file, instead this can be created using the <code>UserPage</code> information element.</li>
<li>Headings in meta-data have moved one level up, so the top level heading used in descriptions is now <code>&lt;h2&gt;</code> or <code>##</code>.</li>
</ul>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../</Prefix>
      <href>getting-started/generating-a-static-wiki.html</href>
      <Path>.\getting-started\generating-a-static-wiki.html</Path>
      <Content>
        <h1>Generating a Static Wiki</h1>

<p>Doctran can be used as a static wiki generator. Meaning that given a collection of Markdown or HTML files, Doctran will transform these into styled HTML documents with a title, menu and search. Of course, the following can be combined with document generator capabilities to produce quality documentation.</p>

<p>Assuming for simplicity you have a single markdown file, say <code>index.md</code>, then firstly you need to create a <a href="menu-files.md">menu file</a>. Save the following text as <code>menu.md</code> in the same directory as your index.md</p>

<pre><code> * [Welcome](index.html)
</code></pre>

<p>This will produce a menu with one item named "Welcome" linking to <code>index.md</code>.</p>

<p>Next you need to create a <a href="project-files.md">project file</a> to include your content and menu. Create another file called <code>project.info</code>, again within the same folder, that contains the following:</p>

<pre><code>Name: My Static Wiki
Tagline: My Wiki Tagline
Menu: menu.md
UserPage: index.md
</code></pre>

<p>This will set a project name and tagline and include you menu and content files.</p>

<p>Finally, run Doctran in the folder that these files are saved within, using the following:</p>

<pre><code>doctran --project_info project.info -o StaticWiki
</code></pre>

<p>This will generate your static wiki within a <code>StaticWiki</code> folder.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../</Prefix>
      <href>getting-started/system-requirements-and-installation.html</href>
      <Path>.\getting-started\system-requirements-and-installation.html</Path>
      <Content>
        <h1>System Requirements and Installation</h1>

<h2>Hardware Requirements</h2>

<p>The minimum hardware requirements for Doctran are as follows:</p>

<ul>
<li>1 GHz processor</li>
<li>512 MB RAM</li>
</ul>

<h2>Windows Systems</h2>

<h3>Requirements</h3>

<p>Doctran's only prerequisite is the the .Net Framework 4.</p>

<h3>Installation</h3>

<p>The Windows package comes as a self-installing executable, making installation straightforward. Proceed by following the dialogues. You will be asked to download and install any missing prerequisites, and to add a shortcut to Doctran's command prompt. This is recommended, as loading the command prompt using one of these shortcuts is probably the quickest way of getting started using Doctran.</p>

<h3>Testing the Installation</h3>

<p>Once you have downloaded and run the installation package on you system, it is best to test that the installation has been successful. A test project has been included to allow this.</p>

<ul>
<li>Open up a Doctran command prompt.</li>
<li>Then, type <code>cd testing</code> to move into the testing folder.</li>
<li>Finally, type <code>run_tests.bat</code>.</li>
</ul>

<p>Doctran will then be run on a collection of simple source files. If documentation generation is completed successfully, then you will see the message "Documentation generation complete." outputted. You can view the documentation generated by searching in your home directory for a Docs directory.</p>

<p>If everything finished successfully you are now ready to start creating documentation for you own Fortran projects.</p>

<h2>Linux and Mac OS X Installations</h2>

<h3>Requirements</h3>

<p>The only prerequisite required is Mono version 2.8, or above. This is the implementation of the .Net framework on non-Windows systems. Installation information can be found on Mono's <a href="http://www.mono-project.com/download/">website</a></p>

<h3>Installation</h3>

<p>Installation on Unix based systems are distributed as a <a href="https://github.com/megastep/makeself">makeself</a> package. To install place DoctranTrial.sh in the directory you would like to install Doctran within. Then, open a terminal within that directory and type</p>

<pre><code>sh ./DoctranTrial.sh
</code></pre>

<p>The install package will check and warn you about any missing prerequisites. You will be asked if you want to add a symbolic link from Doctran to your <code>/usr/bin/</code> folder. This will allow you to call Doctran from any folder. Confirming will require root access and you will be prompted to enter your root password.</p>

<h3>Testing the Installation</h3>

<p>Once you have downloaded and run the installation package on you system, it is best to test that the installation has been successful. A test project has been included to allow this.</p>

<ul>
<li>Open up a terminal.</li>
<li>Navigate to Doctran's installation directory.</li>
<li>Type <code>cd testing</code> to move into the testing folder.</li>
<li>Then, type <code>sh run_tests.sh</code>.</li>
</ul>

<p>Doctran will then be run on a collection of simple source files. If documentation generation is completed successfully, then you will see the message "Documentation generation complete." outputted. You can view the documentation generated by searching in your home directory for a Docs directory.</p>

<p>If everything finished successfully you are now ready to start creating documentation for you own Fortran projects.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../</Prefix>
      <href>getting-started/your-first-documentation.html</href>
      <Path>.\getting-started\your-first-documentation.html</Path>
      <Content>
        <h1>Your First Documentation</h1>

<p>Doctran can only be run from the command line. The most basic syntax for running Doctran is </p>

<pre><code>doctran [source_files]
</code></pre>

<p>where source_files is a space separated list of paths to your source files. This will output your documentation in a newly created Docs folder within your current directory.</p>

<p>Commonly, you would want your documentation to be placed within a new folder. To do this use the <code>--output_dir</code> option or its shorter <code>-o</code> option as shown below.</p>

<pre><code>doctran -o &lt;DIR&gt; [source_files]
</code></pre>

<p>The above will output documentation in the <code>&lt;DIR&gt;</code> directory, creating the path if required. The most general syntax for running Doctran is shown below.</p>

<pre><code>doctran [options] [source_files]
</code></pre>

<p>A full list of options can be found <a href="command-line-options.md">here</a></p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/author.html</href>
      <Path>.\project-files\types\author.html</Path>
      <Content>
        <h1>Author</h1>

<p>Use this to specify any additional authors not specified using <a href="source-comments/information-meta-data/author.md">author</a> elements within the source.  This can be specified multiple times and take the following form:</p>

<pre><code>Author:
&gt;SubComponent: SubComponent_Value
</code></pre>

<p>It the following sub-components:</p>

<table>
<thead>
<tr>
<td>Name</td><td>Maximum allowed</td><td>Description</td>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td><td>1</td><td>The author's name.</td>
</tr>
<tr>
<td>Email</td><td>1</td><td>The author's email will be displayed as a mailto link.</td>
</tr>
<tr>
<td>Affiliation</td><td>1</td><td> The author's institution or work place.</td>
</tr>
</tbody>
</table>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/copy.html</href>
      <Path>.\project-files\types\copy.html</Path>
      <Content>
        <h1>Copy</h1>

<p>Instructs that the content at a path should be copied to the output folder. This can be specified multiple times and takes the following form:</p>

<pre><code>Copy: PATH
</code></pre>

<p>The value of <code>PATH</code> is the path of the data to be copied, relative to the project file. The data found will then be copied to the output directory, with the relative path maintained.</p>

<p>For example, given the following directory structure:</p>

<pre><code>- Root
    - project.info
    - File1.md
    - Directory1
        - SubFile1.md
</code></pre>

<p>and within the project.info file there is the command</p>

<pre><code>Copy: Directory1/SubFile.md
</code></pre>

<p>Then the output path will have the directory structure</p>

<pre><code>- OutputDir
    - Directory1
        - SubFile1.md
    + GeneratedContent 
</code></pre>

<p><code>PATH</code> can be more complex than a single filename. See <a href="project-files/values/path.md">PATH</a> for more details.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/copyandparse.html</href>
      <Path>.\project-files\types\copyandparse.html</Path>
      <Content>
        <h1>CopyAndParse</h1>

<p>Instructs that the content at a path should be parse and then copied to the output folder. This can be specified multiple times and takes the following form:</p>

<pre><code>CopyAndParse: PATH
</code></pre>

<p>See <a href="project-files/types/copy.md">Copy</a> for more information on the copied directory structure. <code>PATH</code> can be more complex than a single filename. See <a href="project-files/values/path.md">PATH</a> for more details.</p>

<p>Below show a table of how files of a particular extension will be parsed. Any files not matching an extension below are simply copied without any transformation.</p>

<table>
    <thead>
        <tr>
            <td>Extension</td>
            <td>Transformation description</td>                
            <td>Output Extension</td>       
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>.md, .markdown</td>
            <td>Markdown content within the file is transformed to HTML.</td>                
            <td>.html</td>       
        </tr>

        <tr>
            <td>.less</td>
            <td>LESS content within the file is transformed to CSS</td>                
            <td>.css</td>       
        </tr>           
    </tbody>

</table>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/menu.html</href>
      <Path>.\project-files\types\menu.html</Path>
      <Content>
        <h1>Menu</h1>

<p>Specifies a menu file that contains the menu for the generated documentation. This can be specified only once and takes the following form:</p>

<pre><code>Menu: FILEPATH
</code></pre>

<p>where <code>FILEPATH</code> is the path to a menu file.</p>

<p>See <a href="menu-files.md">here</a> for more information on menu files.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/name.html</href>
      <Path>.\project-files\types\name.html</Path>
      <Content>
        <h1>Name</h1>

<p>The name of the project to be display within the header and title. This should be specified only once and take the following form:</p>

<pre><code>Name: Name_Value
</code></pre>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/searchable.html</href>
      <Path>.\project-files\types\searchable.html</Path>
      <Content>
        <h1>Searchable</h1>

<p>The type of code block that should be indexed and viewable within the documentation search results. This should be specified only once and take the following form:</p>

<pre><code>Searchable:
&gt; Type: Type_Value
</code></pre>

<p><code>Type</code> may be specified multiple times and <code>Type_Value</code> can take any of the following values:</p>

<ul>
<li>File</li>
<li>Program</li>
<li>Module</li>
<li>DerivedType</li>
<li>Assignment</li>
<li>Overload</li>
<li>Operator</li>
<li>Function </li>
<li>Subroutine</li>
</ul>

<p>By default all of the above is made searchable.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/showsource.html</href>
      <Path>.\project-files\types\showsource.html</Path>
      <Content>
        <h1>ShowSource</h1>

<p>The type of code block that syntax highlighted source code should be included on its page. This should be specified only once and take the following form:</p>

<pre><code>Markup:
&gt; Type: Type_Value
</code></pre>

<p><code>Type</code> may be specified multiple times and <code>Type_Value</code> can take of the following values:</p>

<ul>
<li>File</li>
<li>Program</li>
<li>Module</li>
<li>DerivedType</li>
<li>Assignment</li>
<li>Overload</li>
<li>Operator</li>
<li>Function</li>
<li>Subroutine</li>
</ul>

<p>By default the source will be shown for files, programs, functions and subroutines.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/source.html</href>
      <Path>.\project-files\types\source.html</Path>
      <Content>
        <h1>Source</h1>

<p>Specifies a path to Fortran source files. This can be specified multiple times and takes the following form:</p>

<pre><code>Source: PATH
</code></pre>

<p>This can be used instead of or in conjunction with specifying source files at the command-line.</p>

<p><code>PATH</code> can be more complex than a single filename. See <a href="project-files/values/path.md">PATH</a> for more details.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/tagline.html</href>
      <Path>.\project-files\types\tagline.html</Path>
      <Content>
        <h1>Tagline</h1>

<p>Specifies a tag-line for your project that will be shown within the header of the generated documentation. This can be specified once and takes the following form:</p>

<pre><code>Tagline: VALUE
</code></pre>

<p>where <code>VALUE</code> is your tag-line.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/types/userpage.html</href>
      <Path>.\project-files\types\userpage.html</Path>
      <Content>
        <h1>UserPage</h1>

<p>Specifies that a non-source file should be included within the generated documentation. This can be specified multiple times and takes the following form:</p>

<pre><code>UserPage: PATH
</code></pre>

<p>where <code>PATH</code> is the path to a user page file. The pages generated from this content will contain a header and menu similar to automatically generated pages.</p>

<p>See <a href="user-page-files.md">here</a> for more information on user page files.</p>

<p><code>PATH</code> can be more complex than a single filename and specify multiple user page files. See <a href="project-files/values/path.md">PATH</a> for more details.</p>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>project-files/values/path.html</href>
      <Path>.\project-files\values\path.html</Path>
      <Content>
        <h1>PATH</h1>

<p>In general a <code>PATH</code> value can take the form:</p>

<pre><code>pathToDirectory[/**][/searchPattern]
</code></pre>

<p>The <code>searchPattern</code> within the <code>PATH</code> can include the wildcard characters <code>*</code>, <code>?</code>. Their uses are described below:</p>

<table>
    <thead>
        <tr><td>Wildcard specifier</td><td>Description</td></tr>    
    </thead>
    <tbody>
        <tr>
            <td>* (asterisk)</td>
            <td>Matches zero or more characters in that position.</td>            
        </tr>    
        <tr>
            <td>? (question mark)</td>
            <td>Matches zero or one character in that position.</td>            
        </tr>    
    </tbody>
</table>

<p>The path can optionally include <code>**</code> to specify that the preceding directory and all its sub-directories are to be searched for files matching the <code>searchPattern</code>.</p>

<h2>Examples</h2>

<p>For the follow examples assume you have the directory structure:</p>

<pre><code>- Root
    - File1.txt
    - File2.md
    - Directory1
        - SubFile1.txt
        - SubFile2.md
</code></pre>

<p>Then, for the following <code>PATH</code> values:</p>

<ul>
<li><code>Root/File1.txt</code>, matches 
<ul>
<li>Root/File1.txt</li>
</ul></li>
<li><code>Root/*.txt</code>, matches 
<ul>
<li>Root/File1.txt</li>
</ul></li>
<li><code>Root/**/*</code>, matches
<ul>
<li>Root/File1.txt</li>
<li>Root/File2.md</li>
<li>Root/Directory1/SubFile1.txt</li>
<li>Root/Directory1/SubFile2.md</li>
</ul></li>
<li><code>Root/**/*File?.txt</code>, matches
<ul>
<li>Root/File1.txt</li>
<li>Root/Directory1/SubFile1.txt</li>
</ul></li>
</ul>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../</Prefix>
      <href>source-comments/description-meta-data.html</href>
      <Path>.\source-comments\description-meta-data.html</Path>
      <Content>
        <h1>Descriptive Comments</h1>

<p>A description can be placed anywhere within a block to describe that block's purpose. In the case of declarations of variables-like objects, a description must be placed on the line directly beneath the declaration line. A variable-like object refers to variables, arguments and components. A description made up of two parts, a basic and a detail part.</p>

<h3>Basic Part</h3>

<p>The basic part of a description being with <code>!&gt;</code> and is used to give a brief outline of what the block is used for. This description is used as the subtitle on the block's documentation page, as well as the description displayed within lists. Note, a variable-like object can only contain a basic description part.</p>

<h3>Detail Part</h3>

<p>Doctran will treat any line beginning with <code>!&gt;&gt;</code> as a detailed description component. The detailed part of a description is only seen within the blocks documentation page. Detailed descriptions can contain HTML or markdown. Note that section headings are given by <code>&lt;h2&gt;</code> tags in html or the <code>##</code> in markdown as the level one heading is used for the object's name and type. Doctran will automatically make the content between each level two heading foldable.</p>

<p>If required, a description maybe split onto multiple lines by starting the next line with <code>!&gt;</code> or <code>!&gt;&gt;</code> for basic and detailed components respectively.</p>

<h3>Example</h3>

<p>An example of some valid descriptions are shown below.</p>

<pre><code>type Vector_1d
    !&gt; A basic description.
    !&gt; Another line may be included and must be directly below the previous line.
    !&gt;&gt; ## Markdown parsed heading
    !&gt;&gt; A detailed description.
    !&gt;&gt; The same applies for a multi-line detailed descriptions.

    real x_1
    !&gt; A basic description of a variable. This must be directly below the declaration.
end type
</code></pre>

<h2>Named Descriptions</h2>

<p>Named descriptions allow the description of variable-like objects, where several of them are declared on a single line. Any line with the form <code>!&gt; NAME - DESCRIPTION</code>, where <code>NAME</code> is a string of alpha numeric characters, will be interpreted by Doctran as a named description. As with all Fortran names the <code>NAME</code> specified is not case sensitive.</p>

<h3>Example</h3>

<p>An example of some valid named descriptions are shown below.</p>

<pre><code>type Vector_2d
    real x_1, x_2
    !&gt; x_1 - A real variable holding the value of the vector in the x direction.
    !&gt; x_2 - A real variable holding the value of the vector in the y direction.
end type
</code></pre>

<h2>Alternative Commenting</h2>

<p>Named descriptions allow for more flexibility when specifying your descriptions. Doctran will search within a block and also its parent block for names matching the description's name. This allows for a different style of commenting to be used as shown in the example below.</p>

<pre><code>!&gt; Vector_2d - A type containing two real components, representing the two degrees of freedom.
!&gt;&gt; Mathematically this type represents the following:
!&gt;&gt; \[ \vec{x} = \left(\begin{array}{c} x_1 \\ x_2 \end{array} \right) \]
type Vector_2d
    !&gt; x_1 - A real variable holding the value of the vector in the x direction.
    !&gt; x_2 - A real variable holding the value of the vector in the y direction.
    real x_1, x_2
end type
</code></pre>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../</Prefix>
      <href>source-comments/information-meta-data.html</href>
      <Path>.\source-comments\information-meta-data.html</Path>
      <Content>
        <h1>Information Comments</h1>

<p>An information element specifies a specific property of a block. Any line of the form <code>!&gt; TYPE : DESCRIPTION</code>, where <code>TYPE</code> is a string of alpha numeric characters, will be interpreted by Doctran as a information element. The <code>TYPE</code> specification is not case sensitive.</p>

<p>Any line of the form <code>!&gt;&gt; COMPONENT : DESCRIPTION</code> will be interpreted as a sub-component of the <code>TYPE</code> above. Again the <code>COMPONENT</code> is not case sensitive. See the author below information type below as an example.</p>

<p>Doctran supports the following informational elements:</p>

<ul>
<li><a href="source-comments/information-meta-data/author.md">Author</a></li>
</ul>
</Content>
    </UserPage>
    <UserPage>
      <Prefix>../../</Prefix>
      <href>source-comments/information-meta-data/author.html</href>
      <Path>.\source-comments\information-meta-data\author.html</Path>
      <Content>
        <h1>Author</h1>

<p>An author information element is used to specify the person who wrote a block of code. It may be placed within any block of code and the information will be shown on that block's documentation page.</p>

<h2>Sub-Information</h2>

<p>The author information comment supports the following sub-information:</p>

<table>
<thead>
<tr>
<td>Name</td><td>Maximum allowed</td><td>Description</td>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td><td>1</td><td>The author's name.</td>
</tr>
<tr>
<td>Email</td><td>1</td><td>The author's email will be displayed as a mailto link.</td>
</tr>
<tr>
<td>Affiliation</td><td>1</td><td> The author's institution or work place.</td>
</tr>
</tbody>
</table>

<p>Below shows an example of an author information element for a subroutine.</p>

<pre><code>subroutine equals(lhs, rhs)
!&gt; Author:
!&gt;&gt; Name: Bob
!&gt;&gt; Email: bob@example.com
!&gt;&gt; Affiliation: A Fortran Software Company

    type(Vector_1d),intent(inout) :: lhs
    type(Vector_1d),intent(in) :: rhs

    lhs%x_1 = rhs%x_2

end subroutine
</code></pre>
</Content>
    </UserPage>
    <Name>Doctran</Name>
  </Information>
  <DocCreated>
    <DateTime>2016-04-20T15:30:03.8516480+01:00</DateTime>
  </DocCreated>
  <Files />
</Project>